schema {
	query: Query
	mutation: Mutation
}

scalar Byte
scalar Upload
scalar UUID
scalar Long
scalar Void
scalar DateTime
scalar Date

type Query {
	getAllRoles(filterForm: FilterRoleForm, pageableRequest: PageableRequest): PageDto
	getRoleByName(name: String): RoleResponse
	getAllPermissions(filterForm: FilterPermissionForm, pageableRequest: PageableRequest): PageDto
	getPermissionByUuid(uuid: UUID): PermissionResponse
    getAllUsers(filterForm: FilterUserForm, pageableRequest: PageableRequest): PageDto
    findByUsername(username: String): UserWithAccount
    findUserByUuid(uuid: UUID): UserResponse


	findAllDifficulties: [Difficulty]
	getDifficultyByName(difficultyName: EDifficulty): Difficulty
	getCategoryByName(categoryName: ECategory): Category
	findAllCategories: [Category]
	findAllQuestions(limit: Int): [Question]
	getImage(id: String): Image
	getAudio(id: String): Audio
	getVideo(id: String): Video
	findAllLanguages:[Language]
	findLanguageByName(languageName: ELanguage): Language
	findQuestionById(id: String):Question
}

type Mutation {
	createRole(createForm: CreateRoleForm): RoleResponse
	updateRole(uuid: UUID, updateForm: UpdateRoleForm): RoleResponse
	createPermission(createForm: CreatePermissionForm): PermissionResponse
	updatePermission(uuid: UUID, updateForm: UpdatePermissionForm): PermissionResponse
	deleteRole(uuid: UUID): Void
    deletePermission(uuid: UUID): Void
	addRoleToUser(uuid: UUID, uuids: RoleUuidForm): Void
	deleteUserRole(uuid: UUID, uuids: RoleUuidForm): Void
    registerUser(createForm: CreateUserForm): UserResponse
	authenticateUser(loginRequest: LoginRequest): JwtResponse
	verifyUser(verifyUserForm: VerifyUserForm): Void
	resendVerificationCode(email: String): Void


	createCategory(name: CategoryInput): Category
	createLanguage(name: LanguageInput): Language
	createDifficulty(name: DifficultyInput): Difficulty
	createQuestion(question: QuestionInput,imageFile:Upload,audioFile:Upload,videoFile:Upload): Question
	createQuestionFromJsonFile(file:Upload): Boolean
	updateQuestion(id:String,questionUpdate: QuestionUpdateInput): Question
	addImage(file: Upload): String
	addAudio(file: Upload): String
	addVideo(file: Upload): String
	deleteAllQuestions: Boolean
	deleteQuestionById(id:String):Boolean
	deleteUser(uuid: UUID): Void
}

input PageableRequest {
 page: Int
 size: Int
 sortField: String
 sortDirection: Direction
}

enum Direction {
 ASC,
 DESC
}

type PageDto {
 pageNumber: Int!
 pageSize: Int!
 totalElements: Long!
 content: [pageContentType]
}

union pageContentType = UserResponse | RoleResponse | PermissionResponse
